WEBVTT

00:00.390 --> 00:05.800
Another cool thing you can do whenever you initialize a set is you can actually pass in an array.

00:05.820 --> 00:15.990
So I'll go and create an array will do Konst are and then we'll do something like 1 2 3 3 3 4 4 5 5

00:16.050 --> 00:27.180
5 like so now whenever I do this and then I initialize my set I'll do our set new set I can initialize

00:27.180 --> 00:29.430
my set and pass in this array.

00:29.580 --> 00:35.460
And what it's going to do is the constructor is going to take care of this and iterate through this

00:35.520 --> 00:36.830
array right here.

00:36.840 --> 00:41.940
It can actually iterate through anything that's it a ratable but it's going to take out all of the duplicates

00:41.940 --> 00:42.470
right here.

00:42.480 --> 00:47.820
And by default only put one unique value in each member of the set or in each part of the set.

00:47.820 --> 00:57.000
So now if I do counselled or log or set size like so you see a prince out of 5.

00:57.010 --> 00:59.630
And as you can see there's only five unique numbers here.

00:59.630 --> 01:03.000
So it completely gets rid of the duplicates which is pretty nice.

01:03.000 --> 01:08.200
And then last but not least if you want to check if a value is actually on your array.

01:08.370 --> 01:13.830
You can just cancel it out log to show it or to see it do are set.

01:13.860 --> 01:19.650
Spell it right has DOT has method and then whatever you want to test for us in this case file in a test

01:19.650 --> 01:20.410
for two.

01:20.520 --> 01:21.450
You can see it's true.

01:21.480 --> 01:26.000
And if I test for A-6 it's going to be false and I can test the other array too.

01:26.010 --> 01:26.520
So I can.

01:26.520 --> 01:27.530
Or the other set.

01:27.750 --> 01:36.240
So I can do cons. not log said-I has and then maybe check for a key one which should still be available

01:36.300 --> 01:40.170
unless I commented it out and you could see it does have that available.

01:40.230 --> 01:45.360
And if I just type in a random object that's going to be false because those are not the same references.
