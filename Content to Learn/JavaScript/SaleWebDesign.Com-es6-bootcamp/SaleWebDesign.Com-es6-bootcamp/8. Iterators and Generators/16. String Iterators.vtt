WEBVTT

00:00.630 --> 00:05.840
In Javascript it seems like strings are becoming more and more like arrays for example.

00:05.850 --> 00:14.580
If I do like a SDR it will just do abc like so I can actually access this by using bracket notation

00:14.580 --> 00:15.420
like so.

00:15.480 --> 00:20.100
So you know like I said they're becoming more and more like strings and I could also create a loop if

00:20.100 --> 00:22.950
I wanted to do for less.

00:23.130 --> 00:34.840
Equals zero while it is less than as less than as to your length increment the council.

00:35.570 --> 00:46.080
As to your index now the way that this bracket notation works is that access is units so every single

00:46.200 --> 00:51.450
different letter every single different character right here maps to a particular code.

00:51.450 --> 00:57.080
I can illustrate this to you by doing something like counseled out log.

00:57.810 --> 01:08.190
As to your Shaar code x and then one like so and you're going to see the char code of let's see be right

01:08.190 --> 01:10.000
here is actually 98.

01:10.230 --> 01:14.900
So this works really really well unless you're working with double byte characters.

01:14.910 --> 01:20.430
Now double byte character would be something like this particular symbol right here.

01:20.430 --> 01:22.410
This is considered a double byte character.

01:22.410 --> 01:29.310
Now the problem with double byte characters is that they are represented with two separate code units

01:29.310 --> 01:33.980
instead of one bracket notation works by accessing the code unit.

01:34.020 --> 01:38.640
And so whenever I try to loop through this you're going to see I get two question marks right here because

01:38.640 --> 01:45.780
it's treating each code unit that makes up this character individually and individually the two separate

01:45.780 --> 01:51.330
code units don't map to any particular character but together they map to this.

01:51.330 --> 01:57.210
So either way it's kind of a problem especially I guess if you're working in like Japanese or Chinese

01:57.450 --> 01:59.990
but actually believe it or not most of the Chinese are.

02:00.000 --> 02:02.880
Scuse me Japanese kanji characters are supported.

02:03.060 --> 02:10.170
For example I can type Japanese on my computer here and I'll do like I don't know which is like the

02:10.170 --> 02:13.860
word for school in Japanese and then I get to go back to English.

02:13.860 --> 02:14.420
There we go.

02:14.460 --> 02:19.170
If I throw this in here you'll see that it actually maps through it really well as you can see but there

02:19.170 --> 02:25.230
are certain symbols like this that are considered to byte characters so this bracket's notation doesn't

02:25.230 --> 02:27.440
work because they have two separate Codi units.

02:27.450 --> 02:33.840
So what we can do is luckily in ESX with string iterators you can just loop through this very easily.

02:33.840 --> 02:46.860
So what we can do now is for let char of s tr and just cancel out log the individual characters like

02:46.860 --> 02:50.510
so and you can see it loops through it like a champ with no problem.

02:50.520 --> 02:54.460
And it even prints out this particular character right here.

02:54.510 --> 02:58.400
So string iterators are a great answer to this problem.
