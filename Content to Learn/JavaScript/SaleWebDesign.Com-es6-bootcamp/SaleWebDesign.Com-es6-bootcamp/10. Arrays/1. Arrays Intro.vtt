WEBVTT

00:00.360 --> 00:06.070
So as you probably can sell by now there are a lot of new additions inside of us.

00:06.240 --> 00:07.860
But we're just about wrap this up.

00:07.860 --> 00:09.950
We have maybe one or two more to go.

00:10.140 --> 00:14.360
So with that being said I'm going to comment this out and now we're going to talk about a raise inside

00:14.370 --> 00:19.350
of 6 so I'll make a new file a raised Jesus and link that up.

00:19.350 --> 00:23.600
So originally inside of javascript arrays were pretty limited.

00:23.610 --> 00:27.700
But then in iOS 5 there were some new additions that were added to make a raise.

00:27.710 --> 00:32.790
Well frankly just more useful and iOS 6 is kind of continuing with that.

00:32.790 --> 00:39.300
So in this case what you can do in iOS 6 is originally there were only two ways to create an array you

00:39.300 --> 00:45.150
could use an object literal or an array literal I should say like so or you could use a new array to

00:45.150 --> 00:49.140
construct a new array with this constructor function right here.

00:49.150 --> 00:52.140
However there are some problems associated with that.

00:52.170 --> 00:57.090
So ESX has introduced a array of as a new way to create arrays.

00:57.180 --> 01:03.330
And the reason this was made was to kind of adjust or address this kind of quirky behavior of using

01:03.330 --> 01:04.370
new array.

01:04.380 --> 01:11.310
Now iminent illustrate that to you like so we're going to do a couple of arrays all do let our one equals

01:11.310 --> 01:20.760
new array like so and then after that we'll do our two equals new array and then we'll pass in a 5 and

01:20.760 --> 01:23.680
then we'll do you know I had an R there.

01:23.730 --> 01:30.960
So then we'll do our three equals new array and then we'll pass in a string.

01:30.960 --> 01:33.730
And then after that we will do this.

01:34.020 --> 01:35.580
We'll do one more.

01:35.700 --> 01:37.630
No I think that's actually going to be good.

01:37.920 --> 01:43.930
So if we canceled all log and we're going to need to do a couple of these do re.

01:44.410 --> 01:47.790
And I'll just copy this like so.

01:47.790 --> 01:51.100
So in this case all cancelled out log the length of the first row.

01:51.420 --> 01:55.950
And you can see it looks pretty normal and if I just canceled out log the array it's just a two item

01:55.950 --> 01:57.310
array pretty straightforward.

01:57.420 --> 02:05.100
But one of the quirks with using this syntax is if you only pass in one numeric value to the array right

02:05.100 --> 02:09.540
here that's actually going to be set as the length of the array.

02:09.540 --> 02:13.400
So if I do array to length I can get it.

02:13.410 --> 02:14.130
There we go.

02:14.310 --> 02:16.220
You're going to see it actually prints out of 5.

02:16.230 --> 02:18.120
Which is exactly what we passed then.

02:18.180 --> 02:24.650
But if we try to access like for example number two in to see right here you're going to see that it's

02:24.660 --> 02:26.010
throwing an error.

02:26.010 --> 02:28.920
And the reason it's throwing in there is not because of that.

02:28.950 --> 02:29.620
There we go.

02:29.660 --> 02:32.160
You going to see it's actually undefined right here.

02:32.160 --> 02:36.990
So in other words that just doesn't work because there is no value inside of this.

02:36.990 --> 02:39.960
Number two in to see right here that's just the length.

02:40.070 --> 02:46.890
And then if you pass in one non numeric value that is going to be set as the one and only value inside

02:46.890 --> 02:53.080
of your race if I do re three and then try to access let's say is zero indices.

02:53.280 --> 03:01.500
You'll see it prints out a string to and then if I try to do the length length like so you can see it

03:01.500 --> 03:05.430
prints out one right here because there's only one item in the array.

03:05.460 --> 03:09.180
So all in all very quirky behavior kind of unpredictable.

03:09.180 --> 03:14.060
So in the next video we'll look at how we can just completely void this by using array dot.
