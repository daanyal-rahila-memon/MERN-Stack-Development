WEBVTT

1
00:00:00.000 --> 00:00:04.000
Earlier

2
00:00:04.000 --> 00:00:08.000
in the course, you learned that JavaScript is a dynamic language, so we can

3
00:00:08.000 --> 00:00:12.000
declare a variable, set it to a number, and then change it's

4
00:00:12.000 --> 00:00:16.000
type and set it to a string, and that's perfectly fine from the

5
00:00:16.000 --> 00:00:20.000
perspective of a JavaScript engine. This is one of the characteristics of a dynamic

6
00:00:20.000 --> 00:00:24.000
language. But we have the same concept in the arguments

7
00:00:24.000 --> 00:00:28.000
of a function. So I'm going to define a function here

8
00:00:28.000 --> 00:00:32.000
call it sum, that has two parameters,

9
00:00:32.000 --> 00:00:36.000
a and b. And here we simply return the sum

10
00:00:36.000 --> 00:00:40.000
of a and b. Now, let's do a console.log,

11
00:00:40.000 --> 00:00:44.000
and call the sum function, pass 1 and 2.

12
00:00:44.000 --> 00:00:48.000
Save the changes, so we get 3. But in JavaScript,

13
00:00:48.000 --> 00:00:52.000
it doesn't matter that this function has 2 parameters, we can

14
00:00:52.000 --> 00:00:56.000
pass only 1 argument. So in this case we get

15
00:00:56.000 --> 00:01:00.000
not a number. Because here a is 1 and b

16
00:01:00.000 --> 00:01:04.000
by default is undefined. So when we have 1 plus

17
00:01:04.000 --> 00:01:08.000
undefined, the result is not a number, this is not a valid

18
00:01:08.000 --> 00:01:12.000
arithmetic operation. The same happens if we don't pass

19
00:01:12.000 --> 00:01:16.000
any arguments. So we don't get an error, we get not a number

20
00:01:16.000 --> 00:01:20.000
as a result. By the same token, we can pass additional

21
00:01:20.000 --> 00:01:24.000
arguments. So in this case we can pass let's say

22
00:01:24.000 --> 00:01:28.000
5 arguments. And that's perfectly valid JavaScript code. So when you

23
00:01:28.000 --> 00:01:32.000
save this, we still get 3, because only the

24
00:01:32.000 --> 00:01:36.000
first 2 arguments are used. But what if you want to have a varying

25
00:01:36.000 --> 00:01:40.000
number of parameters in a function? What if you want to have

26
00:01:40.000 --> 00:01:44.000
the flexibility to pass as many arguments as we want, and get

27
00:01:44.000 --> 00:01:48.000
their sum. Well, every function in JavaScript has a

28
00:01:48.000 --> 00:01:52.000
special object called arguments. Let's log this on

29
00:01:52.000 --> 00:01:56.000
the console, console.log

30
00:01:56.000 --> 00:02:00.000
so this is the arguments object,

31
00:02:00.000 --> 00:02:04.000
you can see that it kind of looks like an array, but it's not an array, it's an object.

32
00:02:04.000 --> 00:02:08.000
But the keys we have in this object are

33
00:02:08.000 --> 00:02:12.000
indexes of the arguments passed to this function. So,

34
00:02:12.000 --> 00:02:16.000
the first argument is 1, the second argument is 2, and so on.

35
00:02:16.000 --> 00:02:20.000
Here we have a length property that returns the number of arguments

36
00:02:20.000 --> 00:02:24.000
that are passed, we have this other property, callee

37
00:02:24.000 --> 00:02:28.000
which returns the currently executed function, so you see we have a reference

38
00:02:28.000 --> 00:02:32.000
to our sum function. So this is the arguments object. Now if you

39
00:02:32.000 --> 00:02:36.000
want to have a function with a varying number of parameters to work

40
00:02:36.000 --> 00:02:40.000
with all the arguments that are passed to this function. So let's

41
00:02:40.000 --> 00:02:44.000
say we want to change this function to return the sum of all

42
00:02:44.000 --> 00:02:48.000
these arguments. Here's a very simple algorithm. So, we declare

43
00:02:48.000 --> 00:02:52.000
a variable called total, set it to 0,

44
00:02:52.000 --> 00:02:56.000
then we can use the for of loop. So let

45
00:02:56.000 --> 00:03:00.000
value of arguments we can use this loop to

46
00:03:00.000 --> 00:03:04.000
iterate over this arguments object. Now earlier, I told you that

47
00:03:04.000 --> 00:03:08.000
we can use the for of loop, on arrays, but technically this loop

48
00:03:08.000 --> 00:03:12.000
can be used on any object that has an iterator. So

49
00:03:12.000 --> 00:03:16.000
the plain objects that we create with the object literal syntax, they don't have an

50
00:03:16.000 --> 00:03:20.000
iterator, but this particular object you can see, here we have

51
00:03:20.000 --> 00:03:24.000
symbol.iterator. That means this object has an iterator

52
00:03:24.000 --> 00:03:28.000
so we can use the for loop. To iterate this object. Now

53
00:03:28.000 --> 00:03:32.000
for every argument we're going to

54
00:03:32.000 --> 00:03:36.000
get that and add it to our total variable. And finally

55
00:03:36.000 --> 00:03:40.000
we will return total.

56
00:03:40.000 --> 00:03:44.000
Now save the changes, we get 15, we can add

57
00:03:44.000 --> 00:03:48.000
another argument, and we get 25.

58
00:03:48.000 --> 00:03:52.000
Now here's the interesting thing. We can completely remove these

59
00:03:52.000 --> 00:03:56.000
parameters here, because technically here we're working with the

60
00:03:56.000 --> 00:04:00.000
arguments object to access the arguments that have passed here. We're not referencing

61
00:04:00.000 --> 00:04:04.000
a or b anywhere in the body of

62
00:04:04.000 --> 00:04:08.000
this function. So we can simplify this code and remove

63
00:04:08.000 --> 00:04:12.000
these parameters. In the next lecture, we're going to look at a better way to

64
00:04:12.000 --> 00:04:15.266
implement this function.

