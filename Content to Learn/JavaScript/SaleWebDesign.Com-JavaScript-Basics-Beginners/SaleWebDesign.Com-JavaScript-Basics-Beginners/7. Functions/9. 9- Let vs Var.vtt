WEBVTT

1
00:00:00.000 --> 00:00:04.000
So far

2
00:00:04.000 --> 00:00:08.000
we have been declaring variables using the let keyword. But at the beginning of

3
00:00:08.000 --> 00:00:12.000
course, I briefly mentioned that there is another way to declare variables,

4
00:00:12.000 --> 00:00:16.000
using the var keyword. And we see

5
00:00:16.000 --> 00:00:20.000
this in a lot of JavaScript code online. In this lecture

6
00:00:20.000 --> 00:00:24.000
we're going to look at the var keyword, you're going to look at the problems with the var,

7
00:00:24.000 --> 00:00:28.000
and why you should avoid it. So let's start

8
00:00:28.000 --> 00:00:32.000
by defining a function, start, here we're going to

9
00:00:32.000 --> 00:00:36.000
have a loop, let i = 0.

10
00:00:36.000 --> 00:00:40.000
We're going to run this loop 5 times, and

11
00:00:40.000 --> 00:00:44.000
in each iteration we're going to display i on the console.

12
00:00:44.000 --> 00:00:48.000
Now, let's call the start function, save the changes, so we get

13
00:00:48.000 --> 00:00:52.000
numbers 0-4. Now in the last lecture you learned that

14
00:00:52.000 --> 00:00:56.000
i is only accessible inside this block.

15
00:00:56.000 --> 00:01:00.000
So if you try to log i outside this block,

16
00:01:00.000 --> 00:01:04.000
we're going to get an error, i is not defined.

17
00:01:04.000 --> 00:01:08.000
Now I just want to clarify something. We still have the same

18
00:01:08.000 --> 00:01:12.000
concept if I have removed these curly braces, because here we have

19
00:01:12.000 --> 00:01:16.000
a single statement, so the scope of i is still

20
00:01:16.000 --> 00:01:20.000
this block here. Okay? So save the changes,

21
00:01:20.000 --> 00:01:24.000
we still get the same error. However, let's

22
00:01:24.000 --> 00:01:28.000
see what happens when we replace let with var.

23
00:01:28.000 --> 00:01:32.000
Save the changes. What happened to our error? So,

24
00:01:32.000 --> 00:01:36.000
it turns out that i is accessible outside

25
00:01:36.000 --> 00:01:40.000
of this for block. So in the last iteration,

26
00:01:40.000 --> 00:01:44.000
i becomes 5. Because 5 is not less than 5

27
00:01:44.000 --> 00:01:48.000
so the loop terminates, and here on line 6, we're displaying

28
00:01:48.000 --> 00:01:52.000
the current value of i. So this is the issue with the var

29
00:01:52.000 --> 00:01:56.000
keyword. When you declare a variable with var. It's scope,

30
00:01:56.000 --> 00:02:00.000
is not limited to the block in which it's defined.

31
00:02:00.000 --> 00:02:04.000
It's limited to the function in which it's defined, and this

32
00:02:04.000 --> 00:02:08.000
is not how most or all programming languages work.

33
00:02:08.000 --> 00:02:12.000
It's one of those weird things in JavaScript that we have had for a long time.

34
00:02:12.000 --> 00:02:16.000
So before ES6, var was the only way to declare

35
00:02:16.000 --> 00:02:20.000
variables in constants. Starting from ES6, also

36
00:02:20.000 --> 00:02:24.000
called ES2015, now we have two new keywords

37
00:02:24.000 --> 00:02:28.000
let and const, to define different variables and constants. These

38
00:02:28.000 --> 00:02:32.000
two keywords create block scope variables,

39
00:02:32.000 --> 00:02:36.000
but car creates function scoped

40
00:02:36.000 --> 00:02:40.000
variables. Let's take a look at another example. So in this

41
00:02:40.000 --> 00:02:44.000
for loop, let's add a code block here,

42
00:02:44.000 --> 00:02:48.000
now I'm going to add an if statement,

43
00:02:48.000 --> 00:02:52.000
now in the if block I'm going to declare a variable

44
00:02:52.000 --> 00:02:56.000
using var, color set it to red. Now technically

45
00:02:56.000 --> 00:03:00.000
in almost all programming languages out there, this variables

46
00:03:00.000 --> 00:03:04.000
should only be accessible in this block. But because we have

47
00:03:04.000 --> 00:03:08.000
used var, color is accessible anywhere

48
00:03:08.000 --> 00:03:12.000
in this function. So, at the end of this function, you can log

49
00:03:12.000 --> 00:03:16.000
color, save the changes, look we get red here.

50
00:03:16.000 --> 00:03:20.000
But if we replace var with let,

51
00:03:20.000 --> 00:03:24.000
you get an error, because color is not accessible here.

52
00:03:24.000 --> 00:03:28.000
And that's how most languages work. So this is the first problem,

53
00:03:28.000 --> 00:03:32.000
with the var keyword. The second issue is with global

54
00:03:32.000 --> 00:03:36.000
variables. So let's delete all the code here, I'm going to declare

55
00:03:36.000 --> 00:03:40.000
two variables one with var color we set it to

56
00:03:40.000 --> 00:03:44.000
red, and one with let. Let's say

57
00:03:44.000 --> 00:03:48.000
age and set it to 30. Now when we use

58
00:03:48.000 --> 00:03:52.000
var, outside of a function, this creates a global variable

59
00:03:52.000 --> 00:03:56.000
and attaches that global variable to the window object in the

60
00:03:56.000 --> 00:04:00.000
browser. So in browsers we have this window object,

61
00:04:00.000 --> 00:04:04.000
which is a complex object with lots of proprties

62
00:04:04.000 --> 00:04:08.000
and methods. When you want to build frontend applications you're going to work

63
00:04:08.000 --> 00:04:12.000
with this window object a lot. Now what matters here

64
00:04:12.000 --> 00:04:16.000
is this var keyword attaches this

65
00:04:16.000 --> 00:04:20.000
color variable to the window object. So if you type window

66
00:04:20.000 --> 00:04:24.000
.look our color variable is here.

67
00:04:24.000 --> 00:04:28.000
In contrast when we use the let keyword to define a global variable,

68
00:04:28.000 --> 00:04:32.000
that global variable is not attached to the window object.

69
00:04:32.000 --> 00:04:36.000
So, if we type window.age you can see it's undefined.

70
00:04:36.000 --> 00:04:40.000
So why is it bad to attach a window to a variable object?

71
00:04:40.000 --> 00:04:44.000
Well, because window object is something central, there is

72
00:04:44.000 --> 00:04:48.000
only one instance of the window object, and let's say you're using

73
00:04:48.000 --> 00:04:52.000
a third party library. If that third party library also has a

74
00:04:52.000 --> 00:04:56.000
variable with the same name, that variable can override your

75
00:04:56.000 --> 00:05:00.000
variable. So you should avoid adding stuff to the window object.

76
00:05:00.000 --> 00:05:04.000
Otherwise you're going to create all sorts of issues in your program. So,

77
00:05:04.000 --> 00:05:08.000
for a curious developer, I need to mention that when we define a function

78
00:05:08.000 --> 00:05:12.000
let's say say hi, this function

79
00:05:12.000 --> 00:05:16.000
is technically a global function and is added to the

80
00:05:16.000 --> 00:05:20.000
window object. So let me save the changes. If you type window.

81
00:05:20.000 --> 00:05:24.000
sayHi, see our function is here so we can call it.

82
00:05:24.000 --> 00:05:28.000
So technically this is a global function, it's attached to the window

83
00:05:28.000 --> 00:05:32.000
object, and that is bad practice. But how can we prevent this? Well,

84
00:05:32.000 --> 00:05:36.000
later in the course where I talk about modules, you will learn how to

85
00:05:36.000 --> 00:05:40.000
encapsulate these functions in separate modules so they are not

86
00:05:40.000 --> 00:05:44.000
added to the window object. So here's what I want you to take away from this

87
00:05:44.000 --> 00:05:48.000
lecture. Avoid using the var keyword, because it creates variables

88
00:05:48.000 --> 00:05:52.000
that are function scope, not block scope.

