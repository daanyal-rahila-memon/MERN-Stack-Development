WEBVTT

1
00:00:00.000 --> 00:00:04.000
So in the last

2
00:00:04.000 --> 00:00:08.000
lecture you learned that this references the object that is

3
00:00:08.000 --> 00:00:12.000
executing the current function. Alright, now let me show you a few different solutions

4
00:00:12.000 --> 00:00:16.000
to change the value of this in a function.

5
00:00:16.000 --> 00:00:20.000
So, let's imagine our for each method doesn't have

6
00:00:20.000 --> 00:00:24.000
the second parameter. How can we change the value of this? Well,

7
00:00:24.000 --> 00:00:28.000
here's one simple solution. Before we can the for each method,

8
00:00:28.000 --> 00:00:32.000
we can define a constant, call it self, and

9
00:00:32.000 --> 00:00:36.000
setting it to this. Some people also call this that.

10
00:00:36.000 --> 00:00:40.000
It's one of a personal preference there is no right or wrong. So lets

11
00:00:40.000 --> 00:00:44.000
call this self, now this point, self

12
00:00:44.000 --> 00:00:48.000
is referencing the video object here, so in our

13
00:00:48.000 --> 00:00:52.000
callback function we can use self instead of this.

14
00:00:52.000 --> 00:00:56.000
Because the value of this changes when a new function is called.

15
00:00:56.000 --> 00:01:00.000
So at this point, this references the video object, but when

16
00:01:00.000 --> 00:01:04.000
we get to this callback function, this references the global

17
00:01:04.000 --> 00:01:08.000
object. So here we can use self which is the original

18
00:01:08.000 --> 00:01:12.000
value of this, save the changes, and we get the

19
00:01:12.000 --> 00:01:16.000
title of the video here. Beautiful. Now this is not the preferred approach,

20
00:01:16.000 --> 00:01:20.000
but it's something that you see in a lot of JavaScript applications out there.

21
00:01:20.000 --> 00:01:24.000
So I just want you to understand it but don't use this approach. Now let's

22
00:01:24.000 --> 00:01:28.000
take a look at another approach. Earlier in the course, you learned

23
00:01:28.000 --> 00:01:32.000
the functions are objects in JavaScript. So let's define a function

24
00:01:32.000 --> 00:01:36.000
call it playVideo, here we do a console

25
00:01:36.000 --> 00:01:40.000
.log of this. So this function is technically,

26
00:01:40.000 --> 00:01:44.000
an object. So it has properties and methods that we can access

27
00:01:44.000 --> 00:01:48.000
using a dot notation. Here we have 3 methods

28
00:01:48.000 --> 00:01:52.000
apply bind and call, and with these we can change

29
00:01:52.000 --> 00:01:56.000
the value of this or this function. The simplest

30
00:01:56.000 --> 00:02:00.000
is the call method. The first parameter

31
00:02:00.000 --> 00:02:04.000
of this method is thisArg, so here we can pass an object

32
00:02:04.000 --> 00:02:08.000
and this will reference that object. For example,

33
00:02:08.000 --> 00:02:12.000
I can pass a new object with the name property set to Mosh,

34
00:02:12.000 --> 00:02:16.000
now when we save the changes,

35
00:02:16.000 --> 00:02:20.000
we're going to see this object on the console. But before we get there let me temporarily

36
00:02:20.000 --> 00:02:24.000
comment out this previous code, so save the changes

37
00:02:24.000 --> 00:02:28.000
you see this new object. In contrast

38
00:02:28.000 --> 00:02:32.000
if we call this function using the standard function call syntax,

39
00:02:32.000 --> 00:02:36.000
this references the window object. So this is a benefit

40
00:02:36.000 --> 00:02:40.000
of using the call method. We have another method that is

41
00:02:40.000 --> 00:02:44.000
similar to call and that is called apply. So let me duplicate this line,

42
00:02:44.000 --> 00:02:48.000
change this to apply, save the changes,

43
00:02:48.000 --> 00:02:52.000
again, we get the same result. So what we pass as the first

44
00:02:52.000 --> 00:02:56.000
argument here will be used as the value of this, the difference

45
00:02:56.000 --> 00:03:00.000
between call and apply is only about passing arguments.

46
00:03:00.000 --> 00:03:04.000
So if this function has multiple parameters, let's say

47
00:03:04.000 --> 00:03:08.000
a and b, we can supply multiple arguments here,

48
00:03:08.000 --> 00:03:12.000
1 and 2, but with the apply method we have to pass them

49
00:03:12.000 --> 00:03:16.000
as an array. So, 1 and 2.

50
00:03:16.000 --> 00:03:20.000
That's the only difference. We have another difference that is bind.

51
00:03:20.000 --> 00:03:24.000
So playVideo.bind, once again the first

52
00:03:24.000 --> 00:03:28.000
argument is thisArg so we can pass

53
00:03:28.000 --> 00:03:32.000
this object name Mosh, but this bind method

54
00:03:32.000 --> 00:03:36.000
does not call our playVideo function.

55
00:03:36.000 --> 00:03:40.000
It returns a new function, and sets this to

56
00:03:40.000 --> 00:03:44.000
point to this object permanently. So no matter how we call that

57
00:03:44.000 --> 00:03:48.000
function, this will always, always, always point

58
00:03:48.000 --> 00:03:52.000
to this object that we pass here. So this returns the new function

59
00:03:52.000 --> 00:03:56.000
we can store the result in a constant, and now

60
00:03:56.000 --> 00:04:00.000
call this function just like a regular function. Save the changes,

61
00:04:00.000 --> 00:04:04.000
once again we get this new object here. Now in this

62
00:04:04.000 --> 00:04:08.000
particular case we don't really need the separate constant, we can delete

63
00:04:08.000 --> 00:04:12.000
this, and immediately call the function that is returned

64
00:04:12.000 --> 00:04:16.000
from the bind method. Save the changes, we get the

65
00:04:16.000 --> 00:04:20.000
same result. So with call, apply, and bind we can

66
00:04:20.000 --> 00:04:24.000
set the this argument for a given function. Now, let's go

67
00:04:24.000 --> 00:04:28.000
back to our previous example. So, let's delete all this code here.

68
00:04:28.000 --> 00:04:32.000
Back in the showTags method,

69
00:04:32.000 --> 00:04:36.000
so here we're passing this callback function, and in this function we're going

70
00:04:36.000 --> 00:04:40.000
to use this. So we no longer need this

71
00:04:40.000 --> 00:04:44.000
self constant. However as you know, by default,

72
00:04:44.000 --> 00:04:48.000
here this references the global object, but we want to change this.

73
00:04:48.000 --> 00:04:52.000
So here we have a function, we can call the bind method

74
00:04:52.000 --> 00:04:56.000
emit it here, and then, pass an

75
00:04:56.000 --> 00:05:00.000
object to be used as the value of this.

76
00:05:00.000 --> 00:05:04.000
What should we pass here? This. Because as I told you before,

77
00:05:04.000 --> 00:05:08.000
at this point we are in the showTags

78
00:05:08.000 --> 00:05:12.000
method, so this references our video object. So,

79
00:05:12.000 --> 00:05:16.000
save the changes, and once again you can see the title of the

80
00:05:16.000 --> 00:05:20.000
video next to each tag. So using the bind method is the second solution,

81
00:05:20.000 --> 00:05:24.000
to solve this problem, but there is a newer and better solution.

82
00:05:24.000 --> 00:05:28.000
Starting from ECMA script 6, we have arrow function.

83
00:05:28.000 --> 00:05:32.000
The good thing about the arrow functions is that they inherit

84
00:05:32.000 --> 00:05:36.000
the this value. Let me show you what I mean by that. So,

85
00:05:36.000 --> 00:05:40.000
let's remove the call to the bind method, and change this

86
00:05:40.000 --> 00:05:44.000
function to an arrow function. So we remove the function

87
00:05:44.000 --> 00:05:48.000
keyword with a fat arrow between the parameter and the body,

88
00:05:48.000 --> 00:05:52.000
and because we have a single parameter we remove parenthesis.

89
00:05:52.000 --> 00:05:56.000
Clear syntax, now if you save the changes, we still get the same result,

90
00:05:56.000 --> 00:06:00.000
without doing anything extra. The reason for this

91
00:06:00.000 --> 00:06:04.000
is because arrow functions inherit this from the

92
00:06:04.000 --> 00:06:08.000
containing function. So in this function. This

93
00:06:08.000 --> 00:06:12.000
references the video object, so when we pass

94
00:06:12.000 --> 00:06:16.000
an arrow function here, the same this value, is

95
00:06:16.000 --> 00:06:20.000
used in this arrow function. In other words, this is not

96
00:06:20.000 --> 00:06:24.000
rebound to a new object. So let's quickly recap.

97
00:06:24.000 --> 00:06:28.000
In this lecture, you learned about 3 ways to change the value of this.

98
00:06:28.000 --> 00:06:32.000
The first solution should use the self approach

99
00:06:32.000 --> 00:06:36.000
so, the second solution was using

100
00:06:36.000 --> 00:06:40.000
the bind method, so right after defining this function,

101
00:06:40.000 --> 00:06:44.000
call bind, and pass this as the argument, but again this

102
00:06:44.000 --> 00:06:48.000
is the old way of doing things, it's a little bit noisy but you may still see it in a lot of

103
00:06:48.000 --> 00:06:52.000
JavaScript applications out there. So going forward the modern

104
00:06:52.000 --> 00:06:56.000
approach to solve this particular problem when dealing with callbacks

105
00:06:56.000 --> 00:07:00.000
is to use an arrow function.

