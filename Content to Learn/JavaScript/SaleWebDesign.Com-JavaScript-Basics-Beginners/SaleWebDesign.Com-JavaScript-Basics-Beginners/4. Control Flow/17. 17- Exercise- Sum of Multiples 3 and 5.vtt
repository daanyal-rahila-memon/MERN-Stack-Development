WEBVTT

1
00:00:00.000 --> 00:00:04.000
Here's another

2
00:00:04.000 --> 00:00:08.000
simple but great exercise that trains your programming brain.

3
00:00:08.000 --> 00:00:12.000
So I want you to create this function called sum, we give it a limit

4
00:00:12.000 --> 00:00:16.000
and this function will return the sum of all the multiples

5
00:00:16.000 --> 00:00:20.000
of 3 and 5 from 0 up to this limit.

6
00:00:20.000 --> 00:00:24.000
Here's an example. What are the multiples of 3 and 5,

7
00:00:24.000 --> 00:00:28.000
between 0 and 10. Well, multiples

8
00:00:28.000 --> 00:00:32.000
of 3, are 3, 6, and 9

9
00:00:32.000 --> 00:00:36.000
and multiples of 5 are

10
00:00:36.000 --> 00:00:40.000
are 5 and 10, so I'm including this number that

11
00:00:40.000 --> 00:00:44.000
is passed as a limit. Now if you add these numbers together,

12
00:00:44.000 --> 00:00:48.000
the result will be 33, and that

13
00:00:48.000 --> 00:00:52.000
is the trouble of this function, so save the changes, we get 33.

14
00:00:56.000 --> 00:01:00.000
Here we need to start with a for loop, so let i,

15
00:01:00.000 --> 00:01:04.000
equal to 0, as long as i is less than or equal to

16
00:01:04.000 --> 00:01:08.000
limit, we want increment i, now we

17
00:01:08.000 --> 00:01:12.000
want to check to see if i is a multiple of 3 or 5.

18
00:01:12.000 --> 00:01:16.000
So if i module is 3

19
00:01:16.000 --> 00:01:20.000
equals 0, or if i module

20
00:01:20.000 --> 00:01:24.000
is 5 equals 0, now we need to take i

21
00:01:24.000 --> 00:01:28.000
and add it to our sum. So here we need to declare a variable,

22
00:01:28.000 --> 00:01:32.000
sum, set it to 0.

23
00:01:32.000 --> 00:01:36.000
And if i is a multiple of 3 or 5,

24
00:01:36.000 --> 00:01:40.000
we need to add i to sum.

25
00:01:40.000 --> 00:01:44.000
And finally, we return, sum.

26
00:01:44.000 --> 00:01:48.000
Now pay attention to how I have formatted this code. I have

27
00:01:48.000 --> 00:01:52.000
added these extra vertical line breaks to separate the initialization

28
00:01:52.000 --> 00:01:56.000
from the actual logic from the return

29
00:01:56.000 --> 00:02:00.000
value. If we didn't have these vertical

30
00:02:00.000 --> 00:02:04.000
breaks, this code would look a little bit squashed, it's a little bit hard to

31
00:02:04.000 --> 00:02:08.000
read. So as a best practice, it's always good to separate the

32
00:02:08.000 --> 00:02:12.000
last line, the return statement, now in this case, we can

33
00:02:12.000 --> 00:02:16.000
have all these lines together because they're highly related. So we start

34
00:02:16.000 --> 00:02:20.000
with initializing sum to 0, and we're now still working on sum to

35
00:02:20.000 --> 00:02:24.000
add something to it. However, some developers prefer to separate

36
00:02:24.000 --> 00:02:28.000
the initialization, so you could add a line break here as well.

37
00:02:28.000 --> 00:02:32.000
That's more of a personal preference. But what I want you to take away is

38
00:02:32.000 --> 00:02:36.000
lines that are highly related should be together, and they should

39
00:02:36.000 --> 00:02:40.000
be separate from other lines.

