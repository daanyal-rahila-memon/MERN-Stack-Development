WEBVTT

1
00:00:00.000 --> 00:00:04.000
Alright

2
00:00:04.000 --> 00:00:08.000
here's your next exercise. I want you to write a function called show numbers

3
00:00:08.000 --> 00:00:12.000
that takes a parameter called limit. So we pass a number here,

4
00:00:12.000 --> 00:00:16.000
like 10, and when we call this function, we should call all the numbers

5
00:00:16.000 --> 00:00:20.000
from 0 to the number we supplied as the limit.

6
00:00:20.000 --> 00:00:24.000
Now next to each number if that number is even we should

7
00:00:24.000 --> 00:00:28.000
display the even number, otherwise we should display odd. It's a fairly

8
00:00:28.000 --> 00:00:32.000
easy exercise. Pause the video, spend a few minutes, and when you're done come back,

9
00:00:32.000 --> 00:00:36.000
continue watching.

10
00:00:36.000 --> 00:00:40.000
So here we need a for loop,

11
00:00:40.000 --> 00:00:44.000
we set our i variable to 0,

12
00:00:44.000 --> 00:00:48.000
and as long as i is less than or equal to this limit

13
00:00:48.000 --> 00:00:52.000
we're going to run this loop, and in every iteration we'll increment i.

14
00:00:52.000 --> 00:00:56.000
Now here we need to check if i is an even

15
00:00:56.000 --> 00:01:00.000
number or not. So if i module is 2,

16
00:01:00.000 --> 00:01:04.000
= 0, display console

17
00:01:04.000 --> 00:01:08.000
.log, of i, and as the second

18
00:01:08.000 --> 00:01:12.000
argument we pass even, otherwise,

19
00:01:12.000 --> 00:01:16.000
we do a console.log of i

20
00:01:16.000 --> 00:01:20.000
and odd. Now there is another way to write this program,

21
00:01:20.000 --> 00:01:24.000
so instead of having to separate console.log statements,

22
00:01:24.000 --> 00:01:28.000
we can do something like this. We can declare a

23
00:01:28.000 --> 00:01:32.000
constant, call it message, and here we can use the conditional

24
00:01:32.000 --> 00:01:36.000
operator. So if i is an even number,

25
00:01:36.000 --> 00:01:40.000
we set message to even otherwise we

26
00:01:40.000 --> 00:01:44.000
set that to odd. Next,

27
00:01:44.000 --> 00:01:48.000
we do a console.log of i and message.

28
00:01:48.000 --> 00:01:52.000
I find this second implementation cleaner and less noisy

29
00:01:52.000 --> 00:01:56.000
but if you use the first implementation that's perfectly fine as well.

30
00:01:56.000 --> 00:02:00.000
Now, save the changes, we get all the numbers,

31
00:02:00.000 --> 00:02:02.733
from 0 to 10.

