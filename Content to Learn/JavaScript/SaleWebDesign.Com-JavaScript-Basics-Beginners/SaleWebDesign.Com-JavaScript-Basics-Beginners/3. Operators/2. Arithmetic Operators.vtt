WEBVTT

1
00:00:00.000 --> 00:00:04.000
The first

2
00:00:04.000 --> 00:00:08.000
category of operators we're going to look at is arithmetic operators.

3
00:00:08.000 --> 00:00:12.000
We use this for performing calculations, just like the

4
00:00:12.000 --> 00:00:16.000
calculations in mathematics, so here we have two variables

5
00:00:16.000 --> 00:00:20.000
x and y, let's take a look at all the arithmetic

6
00:00:20.000 --> 00:00:24.000
operators in JavaScript. So I'm going to do a console

7
00:00:24.000 --> 00:00:28.000
.log, here's the first example, x plus y,

8
00:00:28.000 --> 00:00:32.000
that is the edition operator. So these arithmetic operators

9
00:00:32.000 --> 00:00:36.000
usually take two up rands (?) in this case x

10
00:00:36.000 --> 00:00:40.000
and y. And then produce a new value. What we have here

11
00:00:40.000 --> 00:00:44.000
is x + y is what we refer to as an expression

12
00:00:44.000 --> 00:00:48.000
in JavaScript. So an expression is something that produces

13
00:00:48.000 --> 00:00:52.000
a value. So here's the edition operator. We also have

14
00:00:52.000 --> 00:00:56.000
subtraction. We have

15
00:00:56.000 --> 00:01:00.000
multiplication. Division.

16
00:01:00.000 --> 00:01:04.000
And remainder of devision. So just like

17
00:01:04.000 --> 00:01:08.000
basic arithmetic operators in mathematics, we have

18
00:01:08.000 --> 00:01:12.000
a new operator in JavaScript that is exponentiation

19
00:01:12.000 --> 00:01:16.000
it's indicated by two stars, and that is x,

20
00:01:16.000 --> 00:01:20.000
to the power of y. So these are pretty straight forrward

21
00:01:20.000 --> 00:01:24.000
we have two additional arithmetic operators that are a little bit more tricky.

22
00:01:24.000 --> 00:01:28.000
So I'm going to focus on those. For now I'm going to comment out

23
00:01:28.000 --> 00:01:32.000
these few lines, you can do that by selecting a piece of code, and

24
00:01:32.000 --> 00:01:36.000
pressing command and / on Mac, or control and /

25
00:01:36.000 --> 00:01:40.000
on Windows. So, these two other

26
00:01:40.000 --> 00:01:44.000
operators, are increment and decrement operators

27
00:01:44.000 --> 00:01:48.000
let's see how they work. So increment is indicated by

28
00:01:48.000 --> 00:01:52.000
two plus signs, and depending on where we put the plus signs

29
00:01:52.000 --> 00:01:56.000
this operator will behave differently. So I'm going to do a

30
00:01:56.000 --> 00:02:00.000
console.log of x, x is initialized to 10,

31
00:02:00.000 --> 00:02:04.000
so if I save the changes, we see 10 on the console.

32
00:02:04.000 --> 00:02:08.000
Now, if I put the increment operator before

33
00:02:08.000 --> 00:02:12.000
x the value of x will be incremented by

34
00:02:12.000 --> 00:02:16.000
1 first and then we will see that on the console. Let's take a look

35
00:02:16.000 --> 00:02:20.000
so save the changes, see we get 11.

36
00:02:20.000 --> 00:02:24.000
In contrast, if you put this operator after x,

37
00:02:24.000 --> 00:02:28.000
we will see x on the console first, and then the value of

38
00:02:28.000 --> 00:02:32.000
x will be incremented by 1. Have a look, save the changes

39
00:02:32.000 --> 00:02:36.000
we see 10, but at this point x is incremented by

40
00:02:36.000 --> 00:02:40.000
1, so if we do another console.log,

41
00:02:40.000 --> 00:02:44.000
of x, now we should see 11. Have a look.

42
00:02:44.000 --> 00:02:48.000
Here it is. The increment operator is pretty similar.

43
00:02:48.000 --> 00:02:52.000
So, instead of two plus signs, we have two minus signs,

44
00:02:52.000 --> 00:02:56.000
and here I'm gonna apply this before x,

45
00:02:56.000 --> 00:03:00.000
so we're going to decrement the value of x by 1,

46
00:03:00.000 --> 00:03:04.000
and then display it on the console. So for this demo, I'm going to comment out

47
00:03:04.000 --> 00:03:08.000
these two lines, have a look, we see 9

48
00:03:08.000 --> 00:03:12.000
on the console, because we apply this operator first and then

49
00:03:12.000 --> 00:03:16.000
displayed x on the console. So these are all

50
00:03:16.000 --> 00:03:20.000
the arithmetic operators we have in JavaScript. To recap,

51
00:03:20.000 --> 00:03:24.000
we have addition, subtraction,

52
00:03:24.000 --> 00:03:28.000
multiplication, division,

53
00:03:28.000 --> 00:03:32.000
remainder of division, exponentiation which is x to the power

54
00:03:32.000 --> 00:03:36.000
of y, as well as increment and decrement

55
00:03:36.000 --> 00:03:39.000
operators.

