1
00:00:00,000 --> 00:00:04,000
Alright now

2
00:00:04,000 --> 00:00:08,000
I want you to create a function called count occurrences.

3
00:00:08,000 --> 00:00:12,000
This function takes an array and search element

4
00:00:12,000 --> 00:00:16,000
and turns the number of times that search element has occurred in this

5
00:00:16,000 --> 00:00:20,000
array. For example, here in our numbers array, we have

6
00:00:20,000 --> 00:00:24,000
a single instance of 1. So if you call this function and pass

7
00:00:24,000 --> 00:00:28,000
1, we get 1, if I add another 1 here,

8
00:00:28,000 --> 00:00:32,000
now, we can see we have two instances of

9
00:00:32,000 --> 00:00:36,000
1. Or if we call this function with a number that does not exist

10
00:00:36,000 --> 00:00:40,000
in the array we get 0. So,

11
00:00:40,000 --> 00:00:44,000
start with the simplest implementation for this function, once you get that working

12
00:00:44,000 --> 00:00:48,000
then to challenge yourself implement this function using

13
00:00:48,000 --> 00:00:52,000
the reduce method in arrays. Because here essentially you're reducing this

14
00:00:52,000 --> 00:00:56,000
entire array into a number, and that number

15
00:00:56,000 --> 00:01:00,000
represents the number of times a given element has occurred in our

16
00:01:00,000 --> 00:01:04,000
array. You will see my solution next.

17
00:01:04,000 --> 00:01:08,000
Alright here's the basic

18
00:01:08,000 --> 00:01:12,000
implementation. So we declare account variable, and initialize it

19
00:01:12,000 --> 00:01:16,000
to 0. Now we need to iterate over this

20
00:01:16,000 --> 00:01:20,000
array. And if you find this search element, we're going to increment

21
00:01:20,000 --> 00:01:24,000
count. At the end of this function we'll return count, very easy.

22
00:01:24,000 --> 00:01:28,000
So, for let

23
00:01:28,000 --> 00:01:32,000
element of array, now if this element

24
00:01:32,000 --> 00:01:36,000
= the search element,

25
00:01:36,000 --> 00:01:40,000
we simply increment count. And finally

26
00:01:40,000 --> 00:01:44,000
we return count. So that's the most basic

27
00:01:44,000 --> 00:01:48,000
implementation. Now let's see how we can use the reduce method to achieve the

28
00:01:48,000 --> 00:01:52,000
same thing with less code. So instead of this implementation,

29
00:01:52,000 --> 00:01:56,000
we are going to use array.

30
00:01:56,000 --> 00:02:00,000
reduce, here we need to pass a callback function with two parameters.

31
00:02:00,000 --> 00:02:04,000
Accumulator, and current.

32
00:02:04,000 --> 00:02:08,000
And this goes to this code block.

33
00:02:08,000 --> 00:02:12,000
So this accumulator represents the number of

34
00:02:12,000 --> 00:02:16,000
times the search element has occurred in our array. So I'm going to initialize

35
00:02:16,000 --> 00:02:20,000
this to 0, like this,

36
00:02:20,000 --> 00:02:24,000
now, every time this callback function is called, you want to

37
00:02:24,000 --> 00:02:28,000
compare this current value with search element. If they are

38
00:02:28,000 --> 00:02:32,000
equal, we should return accumulator plus 1, otherwise we should return

39
00:02:32,000 --> 00:02:36,000
accumulator. So we can do something like this.

40
00:02:36,000 --> 00:02:40,000
We can find a constant called occurrence. Now

41
00:02:40,000 --> 00:02:44,000
if current equals searchElement,

42
00:02:44,000 --> 00:02:48,000
okay I'm going to use the conditional operator, so

43
00:02:48,000 --> 00:02:52,000
if they're equal, I'm going to add 1 to accumulator, otherwise I'm going to add

44
00:02:52,000 --> 00:02:56,000
0 to accumulator. And finally, you're going to return

45
00:02:56,000 --> 00:03:00,000
accumulator plus occurrence. Now

46
00:03:00,000 --> 00:03:04,000
let me show you how this works. So let's do a console

47
00:03:04,000 --> 00:03:08,000
.log, you're going to log 3 values, one is our

48
00:03:08,000 --> 00:03:12,000
accumulator, and the other 2 are current as well as

49
00:03:12,000 --> 00:03:16,000
the searchElement. And one last thing we need to

50
00:03:16,000 --> 00:03:20,000
do here is to actually return this value.

51
00:03:20,000 --> 00:03:24,000
So, let's inspect this program, here

52
00:03:24,000 --> 00:03:28,000
in the console you can see this callback function has been called

53
00:03:28,000 --> 00:03:32,000
5 times. 1, 2, 3, 4, 5, and here's the result.

54
00:03:32,000 --> 00:03:36,000
Because we don't have -1 in this array. Now let me change

55
00:03:36,000 --> 00:03:40,000
this to a value that we have so you can see exactly what is happening under

56
00:03:40,000 --> 00:03:44,000
the hood. So I'm going to change -1 to 1, save the changes,

57
00:03:44,000 --> 00:03:48,000
now let's see what's happening. So, in the first round, our

58
00:03:48,000 --> 00:03:52,000
accumulator is 0. Current is 1, so is

59
00:03:52,000 --> 00:03:56,000
searchElement, so accumulator is incremented by 1.

60
00:03:56,000 --> 00:04:00,000
So in the second round accumulator is 1, current is 2, and our

61
00:04:00,000 --> 00:04:04,000
searchElement as you can see is always 1. So as you can see, these two numbers,

62
00:04:04,000 --> 00:04:08,000
are not equal, so accumulator is not changed. So we simply return

63
00:04:08,000 --> 00:04:12,000
accumulator plus 0. We want to make sure

64
00:04:12,000 --> 00:04:16,000
we keep this number as we go through this array. Now finally

65
00:04:16,000 --> 00:04:20,000
in the last call, you can see accumulator is still 1 and

66
00:04:20,000 --> 00:04:24,000
in this case the current value and the search element are equal, so

67
00:04:24,000 --> 00:04:28,000
accumulator is incremented by 1, and that's what we get out of this

68
00:04:28,000 --> 00:04:31,133
reduced method.

