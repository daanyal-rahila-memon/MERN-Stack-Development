1
00:00:00,000 --> 00:00:04,000
Alright this

2
00:00:04,000 --> 00:00:08,000
exercise is a little bit tricky, but trust me it's absolutely

3
00:00:08,000 --> 00:00:12,000
worth spending time on it, because it trains your programming brain.

4
00:00:12,000 --> 00:00:16,000
So we have this function called move, and we use that to move

5
00:00:16,000 --> 00:00:20,000
an element in an array. So this is how it works, we give it an array

6
00:00:20,000 --> 00:00:24,000
the index of the element we want to move

7
00:00:24,000 --> 00:00:28,000
and an offset. So in this case, I want to move the first

8
00:00:28,000 --> 00:00:32,000
element in this array that is 1. Now I'll pass 0 as the

9
00:00:32,000 --> 00:00:36,000
offset, so with this nothing is going to change, we're going to get the same array.

10
00:00:36,000 --> 00:00:40,000
However, if I pass 1 as the offset,

11
00:00:40,000 --> 00:00:44,000
see what happens here. So 1 moves 1 position to the right.

12
00:00:44,000 --> 00:00:48,000
If I pass two as the offset, 1,

13
00:00:48,000 --> 00:00:52,000
ends up here, if I pass 3, it ends up being at the end of the array,

14
00:00:52,000 --> 00:00:56,000
if I pass anything more than the length of the array, that is for,

15
00:00:56,000 --> 00:01:00,000
I get this error, invalid offset. Now to display

16
00:01:00,000 --> 00:01:04,000
errors like this. I should use another method called console

17
00:01:04,000 --> 00:01:08,000
.error. So you seem to pass this string,

18
00:01:08,000 --> 00:01:12,000
and that will end up as a red message on the console.

19
00:01:12,000 --> 00:01:16,000
Now also note that this offset can be a

20
00:01:16,000 --> 00:01:20,000
negative number. So let's say we want to move this second element

21
00:01:20,000 --> 00:01:24,000
1 position to the left. So we set index to 1,

22
00:01:24,000 --> 00:01:28,000
and offset to -1.

23
00:01:28,000 --> 00:01:32,000
So 2 moves to the beginning of the array, if I pass

24
00:01:32,000 --> 00:01:36,000
-2 as the offset, because it can't jump out of the array,

25
00:01:36,000 --> 00:01:40,000
once again, we are going to get this error, invalid offset.

26
00:01:40,000 --> 00:01:44,000
Also note that in all these examples the original array

27
00:01:44,000 --> 00:01:48,000
is unaffected, so we get a new array with items

28
00:01:48,000 --> 00:01:52,000
reordered. So, spend 10-15 minutes on this exercise,

29
00:01:52,000 --> 00:01:56,000
and when you're done come back and continue watching.

30
00:01:56,000 --> 00:02:00,000
Alright so I've reset these numbers

31
00:02:00,000 --> 00:02:04,000
to 0 and 1, so we want to move the first element in this array,

32
00:02:04,000 --> 00:02:08,000
1 position to the right. The first thing we want to do is copy this

33
00:02:08,000 --> 00:02:12,000
array, because we don't want to modify it. So, that's where we use the

34
00:02:12,000 --> 00:02:16,000
spread operator. I'm going to define a constant,

35
00:02:16,000 --> 00:02:20,000
called output. Set it to a new array, and then

36
00:02:20,000 --> 00:02:24,000
I'm going to spread the original array,

37
00:02:24,000 --> 00:02:28,000
so this will be a clone of the original array, okay? Now,

38
00:02:28,000 --> 00:02:32,000
as part of moving an element, first, we need to remove it from the array,

39
00:02:32,000 --> 00:02:36,000
and then we need to place it back at the right position.

40
00:02:36,000 --> 00:02:40,000
To remove an element from an array, we use the splice method, you have seen

41
00:02:40,000 --> 00:02:44,000
that before. Splice. So we get

42
00:02:44,000 --> 00:02:48,000
the given index and delete 1 item.

43
00:02:48,000 --> 00:02:52,000
Now look at the return value of this method. It returns

44
00:02:52,000 --> 00:02:56,000
an array. So the items that are removed will be returned as an

45
00:02:56,000 --> 00:03:00,000
array. In this case, we're removing 1 item so we can access

46
00:03:00,000 --> 00:03:04,000
the first element in that array, and that would return the element

47
00:03:04,000 --> 00:03:08,000
that we just deleted. So let's store that in a separate constant

48
00:03:08,000 --> 00:03:12,000
the reason I'm storing it here is because next we need to

49
00:03:12,000 --> 00:03:16,000
add this back to the array. Now we want to add this

50
00:03:16,000 --> 00:03:20,000
at a specific position. Once again you need to use the splice method.

51
00:03:20,000 --> 00:03:24,000
So output.splice

52
00:03:24,000 --> 00:03:28,000
now where are we going to place this. We want to go to index plus

53
00:03:28,000 --> 00:03:32,000
offset. Now we don't want to delete any

54
00:03:32,000 --> 00:03:36,000
of the items here, so we pass 0, and finally we pass

55
00:03:36,000 --> 00:03:40,000
this element that we want to place in the array. And

56
00:03:40,000 --> 00:03:44,000
finally, we return the output. Let's test this

57
00:03:44,000 --> 00:03:48,000
so if you move the first element 1 position

58
00:03:48,000 --> 00:03:52,000
to the right, we get the right result, beautiful, if you move it

59
00:03:52,000 --> 00:03:56,000
2 positions to the right, it ends up here, if you pass 3,

60
00:03:56,000 --> 00:04:00,000
it ends up being at the end of the array. If you pass 4,

61
00:04:00,000 --> 00:04:04,000
we don't get the error that I told you you should produce, but the output

62
00:04:04,000 --> 00:04:08,000
is still the same. Now to solve this issue we need to come back here and do some

63
00:04:08,000 --> 00:04:12,000
basic validation before running this algorithm

64
00:04:12,000 --> 00:04:16,000
for moving an item. So we can do something like this, we define a

65
00:04:16,000 --> 00:04:20,000
constant call it position, that is the new position

66
00:04:20,000 --> 00:04:24,000
and that's going to be index + offset, exactly the

67
00:04:24,000 --> 00:04:28,000
same value we have used here. So we can express this expression with position,

68
00:04:28,000 --> 00:04:32,000
now we have position, we can check to see if

69
00:04:32,000 --> 00:04:36,000
position is greater than or equal to

70
00:04:36,000 --> 00:04:40,000
array.length. So in this case our array has 4 elements

71
00:04:40,000 --> 00:04:44,000
if you pass 4 or a greater value, we should see the error

72
00:04:44,000 --> 00:04:48,000
on the console. So here we add the code block, console.

73
00:04:48,000 --> 00:04:52,000
error invalid offset.

74
00:04:52,000 --> 00:04:56,000
And finally we return, so the rest of this function is not

75
00:04:56,000 --> 00:05:00,000
executed. The other option would be to take an else block here.

76
00:05:00,000 --> 00:05:04,000
But that means you have to put this

77
00:05:04,000 --> 00:05:08,000
code inside this block, there's going to be a bit of indentation,

78
00:05:08,000 --> 00:05:12,000
this is really unnecessary, because if we return here, none of the

79
00:05:12,000 --> 00:05:16,000
code here will be executed. So we can get rid of the else keyword instead of the

80
00:05:16,000 --> 00:05:20,000
code block and extra indentation.

81
00:05:20,000 --> 00:05:24,000
So, if you pass for, you should get

82
00:05:24,000 --> 00:05:28,000
error beautiful. Now, let's pass 0,

83
00:05:28,000 --> 00:05:32,000
so we're not going to move this element, we get the original array, beautiful,

84
00:05:32,000 --> 00:05:36,000
if you pass -1, we get some weird results.

85
00:05:36,000 --> 00:05:40,000
In this case one should not jump out of the array, so

86
00:05:40,000 --> 00:05:44,000
we need to change our validation logic here to something like

87
00:05:44,000 --> 00:05:48,000
this. So if position is greater than or equal to the lengths

88
00:05:48,000 --> 00:05:52,000
of the array, or position is a negative

89
00:05:52,000 --> 00:05:56,000
number. Then, we should display the error, save the changes,

90
00:05:56,000 --> 00:06:00,000
beautiful, then let's test this with another

91
00:06:00,000 --> 00:06:04,000
value. So I'm going to work on the second element here. So let's change

92
00:06:04,000 --> 00:06:08,000
0 to 1. We're going to move this 1 position to the left

93
00:06:08,000 --> 00:06:12,000
save the changes, 2 comes here, beautiful, if you pass

94
00:06:12,000 --> 00:06:16,000
-2, again we should get the error, here's the error, perfect,

95
00:06:16,000 --> 00:06:20,000
now let's change this back to 0, so we get the original

96
00:06:20,000 --> 00:06:24,000
array, if we pass 1, 2 moves here, if we pass

97
00:06:24,000 --> 00:06:28,000
2, 2 moves to the end of the array, if you pass 3, you should get

98
00:06:28,000 --> 00:06:31,900
error. And here's the error, beautiful.

