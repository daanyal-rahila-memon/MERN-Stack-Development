WEBVTT

1
00:00:00.000 --> 00:00:04.000
So now you know

2
00:00:04.000 --> 00:00:08.000
how to remove an element from an array. But what about

3
00:00:08.000 --> 00:00:12.000
emptying an array? How can we remove all the elements in this array. Well,

4
00:00:12.000 --> 00:00:16.000
there are a few different solutions. Here's the first solution.

5
00:00:16.000 --> 00:00:20.000
We can simply reassign this to a new

6
00:00:20.000 --> 00:00:24.000
array. Now in this case, because we have declared this array using

7
00:00:24.000 --> 00:00:28.000
const we cannot do this, so we have to change this,

8
00:00:28.000 --> 00:00:32.000
to let. Now, let's log numbers

9
00:00:32.000 --> 00:00:36.000
on the console, save the changes, so,

10
00:00:36.000 --> 00:00:40.000
now our array is empty. However, note that

11
00:00:40.000 --> 00:00:44.000
this old array is still in the memory, so if there are no other references

12
00:00:44.000 --> 00:00:48.000
to this object, eventually it will be removed by the

13
00:00:48.000 --> 00:00:52.000
garbage collector. So this means if we have

14
00:00:52.000 --> 00:00:56.000
let's say another variable called another, and this

15
00:00:56.000 --> 00:01:00.000
is also pointing to the same object, this

16
00:01:00.000 --> 00:01:04.000
original array will not be garbage collected. So,

17
00:01:04.000 --> 00:01:08.000
line 6. When we reassign the numbers variable,

18
00:01:08.000 --> 00:01:12.000
now numbers is pointing to a new object in memory, but

19
00:01:12.000 --> 00:01:16.000
another is still pointing to the old object.

20
00:01:16.000 --> 00:01:20.000
Let me show you. So here, instead of logging

21
00:01:20.000 --> 00:01:24.000
numbers, let's log another. Save the changes. So we

22
00:01:24.000 --> 00:01:28.000
can see another is still pointing to this array, to the original array,

23
00:01:28.000 --> 00:01:32.000
but if you look at the numbers, numbers is now pointing to a

24
00:01:32.000 --> 00:01:36.000
new object. To a new empty array. So this solution works

25
00:01:36.000 --> 00:01:40.000
if you do not have any other references to the original

26
00:01:40.000 --> 00:01:44.000
array. If you do have multiple references to the original array,

27
00:01:44.000 --> 00:01:48.000
then you need to use one of the other solutions. So,

28
00:01:48.000 --> 00:01:52.000
I'm going to comment this out, let's look at solution

29
00:01:52.000 --> 00:01:56.000
2, we can simply set the lengths

30
00:01:56.000 --> 00:02:00.000
property to 0, and this will truncate the array.

31
00:02:00.000 --> 00:02:04.000
It will remove all elements. So, here we're

32
00:02:04.000 --> 00:02:08.000
logging another. Let's also log the original array.

33
00:02:08.000 --> 00:02:12.000
Save the changes. You can see the original array

34
00:02:12.000 --> 00:02:16.000
is truncated to it doesn't matter how many references you have

35
00:02:16.000 --> 00:02:20.000
to that array. So here's solution 2. The

36
00:02:20.000 --> 00:02:24.000
other solution is to use the splice method.

37
00:02:24.000 --> 00:02:28.000
So in the last lecture you learned that with the splice method you can go to a

38
00:02:28.000 --> 00:02:32.000
given position and remove one or more elements.

39
00:02:32.000 --> 00:02:36.000
So we can start from the first elements, and remove all

40
00:02:36.000 --> 00:02:40.000
elements in this array. How many elements do we have in this array? Well

41
00:02:40.000 --> 00:02:44.000
that is numbers.length, okay?

42
00:02:44.000 --> 00:02:48.000
Save the changes, again, both arrays are empty.

43
00:02:48.000 --> 00:02:52.000
And finally the last solution is to use the pop method.

44
00:02:52.000 --> 00:02:56.000
So, solution 4. So you learned that

45
00:02:56.000 --> 00:03:00.000
pop method removes the last element in this array. Now we can put

46
00:03:00.000 --> 00:03:04.000
this in a loop, and keep calling this method, as long as we have an

47
00:03:04.000 --> 00:03:08.000
element in this array. So while numbers

48
00:03:08.000 --> 00:03:12.000
.length is greater than 0, you can keep

49
00:03:12.000 --> 00:03:16.000
popping elements. Save the changes, again,

50
00:03:16.000 --> 00:03:20.000
both arrays are empty. Now this last solution is not something that

51
00:03:20.000 --> 00:03:24.000
I recommend you to do, because if you're dealing with a large array, let's say

52
00:03:24.000 --> 00:03:28.000
if you have a million objects in this array, there's going to be a performance

53
00:03:28.000 --> 00:03:32.000
cost. You're essentially calling this pop method a million times.

54
00:03:32.000 --> 00:03:36.000
Okay, however that's not the situation with most applications out there,

55
00:03:36.000 --> 00:03:40.000
unless you work for Google, but in terms of clean coding, you can see this approach

56
00:03:40.000 --> 00:03:44.000
is pretty noisy, compare that to the

57
00:03:44.000 --> 00:03:48.000
first solution. This is very simple, elegant, the only issue

58
00:03:48.000 --> 00:03:52.000
it has is it doesn't work if you have multiple references to this array.

59
00:03:52.000 --> 00:03:56.000
So my personal preference is to set the length of the array to 0,

60
00:03:56.000 --> 00:04:00.000
but the first solution is also perfectly valid if you have a

61
00:04:00.000 --> 00:04:04.000
single reference to your array. And finally similar to the last solution

62
00:04:04.000 --> 00:04:08.000
you can see solution 3 is a little bit noisy. So

63
00:04:08.000 --> 00:04:12.000
overall, I would go for either solution 2 or solution

64
00:04:12.000 --> 00:04:14.333
1.

