1
00:00:00,000 --> 00:00:04,000
In the last

2
00:00:04,000 --> 00:00:08,000
lecture you learned how to use the object literal syntax to create an object

3
00:00:08,000 --> 00:00:12,000
but there is a tiny problem here. Imagine you want

4
00:00:12,000 --> 00:00:16,000
to create two circle objects, so, I'm going to copy

5
00:00:16,000 --> 00:00:20,000
this code here, and call this second circle

6
00:00:20,000 --> 00:00:24,000
object circle 2. Now the problem that we have here

7
00:00:24,000 --> 00:00:28,000
is that we have duplicated the implementation,

8
00:00:28,000 --> 00:00:32,000
of the draw method, so right now it's a simple method

9
00:00:32,000 --> 00:00:36,000
with only a single line of code, but what if we had 10 lines of

10
00:00:36,000 --> 00:00:40,000
code here. You wouldn't want to repeat all these lines here, because if you

11
00:00:40,000 --> 00:00:44,000
bug in this method, then we'll have to fix it in multiple places.

12
00:00:44,000 --> 00:00:48,000
And also take into account that our circle object currently has only

13
00:00:48,000 --> 00:00:52,000
a single method. What if we had 10 other methods here?

14
00:00:52,000 --> 00:00:56,000
We don't want to duplicate or repeat all that logic, alright?

15
00:00:56,000 --> 00:01:00,000
So, if our objects have logic, we need a different way to

16
00:01:00,000 --> 00:01:04,000
create objects. That's when we use factory or constructor

17
00:01:04,000 --> 00:01:08,000
functions. In this lecture you're going to learn about factory functions

18
00:01:08,000 --> 00:01:12,000
and we'll look at constructor functions next. So I'm going to delete

19
00:01:12,000 --> 00:01:16,000
this second circle and show you how to create

20
00:01:16,000 --> 00:01:20,000
a factory function. So factory function,

21
00:01:20,000 --> 00:01:24,000
just like a factory producing products, these factory functions

22
00:01:24,000 --> 00:01:28,000
produce objects. So we define

23
00:01:28,000 --> 00:01:32,000
a function and call it create circle.

24
00:01:32,000 --> 00:01:36,000
Now we're going to move

25
00:01:36,000 --> 00:01:40,000
this definition of the circle object inside

26
00:01:40,000 --> 00:01:44,000
our factory functions so you have a circle object here,

27
00:01:44,000 --> 00:01:48,000
finally we need to return this. Now one way is to

28
00:01:48,000 --> 00:01:52,000
return it like this, but we don't really need this circle constant defined

29
00:01:52,000 --> 00:01:56,000
because we are not going to reference it anywhere, we only want to return it.

30
00:01:56,000 --> 00:02:00,000
So we can make this code shorter by removing

31
00:02:00,000 --> 00:02:04,000
the circle constant and simply returning

32
00:02:04,000 --> 00:02:08,000
this object. So whenever we call the create circle function

33
00:02:08,000 --> 00:02:12,000
we'll get a circle object. However, we have

34
00:02:12,000 --> 00:02:16,000
hard coded these values here, so every circle that is created by this

35
00:02:16,000 --> 00:02:20,000
function, it's radius will be one. That's not what we want, we want

36
00:02:20,000 --> 00:02:24,000
to have a circle with a bigger radius. So we want to pass

37
00:02:24,000 --> 00:02:28,000
radius as a parameter here. So radius and then

38
00:02:28,000 --> 00:02:32,000
instead of hardcoding 1, we want to set the value

39
00:02:32,000 --> 00:02:36,000
to this radius argument that we supply when calling this function.

40
00:02:36,000 --> 00:02:40,000
Similarly we can add another parameter here

41
00:02:40,000 --> 00:02:44,000
like location, and instead of hard coding this object here,

42
00:02:44,000 --> 00:02:48,000
we simply set location to this location argument.

43
00:02:48,000 --> 00:02:52,000
However, for simplicity, I'm going to remove these two properties.

44
00:02:52,000 --> 00:02:56,000
Location and is visible, so we can focus on

45
00:02:56,000 --> 00:03:00,000
the core of factory functions. So, let's delete these properties,

46
00:03:00,000 --> 00:03:04,000
we don't need the location parameter either, now we can make

47
00:03:04,000 --> 00:03:08,000
this code a little bit shorter. So in modern JavaScript

48
00:03:08,000 --> 00:03:12,000
if our key and value are the same, we can make our code

49
00:03:12,000 --> 00:03:16,000
shorter by removing a value and simply adding the key.

50
00:03:16,000 --> 00:03:20,000
So that is exactly equivalent to this code.

51
00:03:20,000 --> 00:03:24,000
Alright? So that is better, next we have our draw

52
00:03:24,000 --> 00:03:28,000
method, there is also a shorter syntax to define this method,

53
00:03:28,000 --> 00:03:32,000
so instead of defining it as a key value pair, we can

54
00:03:32,000 --> 00:03:36,000
define it like this. So draw parenthesis

55
00:03:36,000 --> 00:03:40,000
and a code block. This is similar to how we

56
00:03:40,000 --> 00:03:44,000
defined a function outside of an object, right? So if you want to

57
00:03:44,000 --> 00:03:48,000
define a function, this is how we define it, right? So we have the

58
00:03:48,000 --> 00:03:52,000
function keyword, then the name of the function, parenthesis, and code block.

59
00:03:52,000 --> 00:03:56,000
Now when we put this inside of an object, basically we're dropping the

60
00:03:56,000 --> 00:04:00,000
function keyword and simply adding this inside

61
00:04:00,000 --> 00:04:04,000
of the object. You can see that this syntax is a little bit shorter than

62
00:04:04,000 --> 00:04:08,000
here. So let me delete this. And move

63
00:04:08,000 --> 00:04:12,000
this console.log statement in our draw

64
00:04:12,000 --> 00:04:16,000
method. So now we have

65
00:04:16,000 --> 00:04:20,000
a factory function, we can simply call this

66
00:04:20,000 --> 00:04:24,000
to create a circle object. So I'm going to define this constant

67
00:04:24,000 --> 00:04:28,000
circle1, and call the create

68
00:04:28,000 --> 00:04:32,000
circle function, and pass 1 as the radius.

69
00:04:32,000 --> 00:04:36,000
Now let's log this circle object on the console. So circle1,

70
00:04:36,000 --> 00:04:40,000
save the changes, so you can see radius is set to 1,

71
00:04:40,000 --> 00:04:44,000
we also have this draw method, so we can

72
00:04:44,000 --> 00:04:48,000
call circle1.draw and

73
00:04:48,000 --> 00:04:52,000
here's our draw message on the console. Now the beauty of this

74
00:04:52,000 --> 00:04:56,000
factory function, is that you have defined our logic

75
00:04:56,000 --> 00:05:00,000
in one place. So we can call this function with different values

76
00:05:00,000 --> 00:05:04,000
or different arguments, we get different circle objects but we have

77
00:05:04,000 --> 00:05:08,000
defined the draw method only in 1 place.

78
00:05:08,000 --> 00:05:12,000
So if there is a bug in this method that we need to fix in the future, there is a

79
00:05:12,000 --> 00:05:16,000
single place that we need to modify. So I'm going to create another circle object,

80
00:05:16,000 --> 00:05:20,000
circle2, createCircle

81
00:05:20,000 --> 00:05:24,000
I'm going to pass 2 as the radius, let's log this on the console.

82
00:05:24,000 --> 00:05:28,000
Circle2, save the changes, look we have 2 different

83
00:05:28,000 --> 00:05:32,000
circle objects and a single definition of the draw method.

84
00:05:32,000 --> 00:05:36,000
So this is all about factory functions. But factory

85
00:05:36,000 --> 00:05:40,000
functions are not the only way to create objects, we can also use

86
00:05:40,000 --> 00:05:44,000
constructor functions, and that's what you're going to learn next.

