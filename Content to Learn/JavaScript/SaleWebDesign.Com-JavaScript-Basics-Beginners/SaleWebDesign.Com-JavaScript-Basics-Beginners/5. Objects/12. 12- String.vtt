WEBVTT

1
00:00:00.000 --> 00:00:04.000
The second

2
00:00:04.000 --> 00:00:08.000
built in object we're going to look at is the string object, so I'm going to

3
00:00:08.000 --> 00:00:12.000
define a constant message and set it to

4
00:00:12.000 --> 00:00:16.000
a string. Now look at this. Message

5
00:00:16.000 --> 00:00:20.000
. what's going on here? It looks like we have a bunch of

6
00:00:20.000 --> 00:00:24.000
properties and methods. But earlier in the course, I told you that

7
00:00:24.000 --> 00:00:28.000
string is a primitive type. Primitive types don't have

8
00:00:28.000 --> 00:00:32.000
properties and methods. Only objects do. So why is it that

9
00:00:32.000 --> 00:00:36.000
we see these properties and methods in this string? Well,

10
00:00:36.000 --> 00:00:40.000
the reason for this is because in JavaScript we have two kinds of

11
00:00:40.000 --> 00:00:44.000
strings. So this is what we call a string

12
00:00:44.000 --> 00:00:48.000
primitive but we also have a string object.

13
00:00:48.000 --> 00:00:52.000
So we have this constructor object string

14
00:00:52.000 --> 00:00:56.000
and we can use that to create a new string object.

15
00:00:56.000 --> 00:01:00.000
So we can pass a new string here, now because this is

16
00:01:00.000 --> 00:01:04.000
a constructor function we need to apply the new operator

17
00:01:04.000 --> 00:01:08.000
and now we have another string. Now let's take a look at

18
00:01:08.000 --> 00:01:12.000
the type of each of these constants. So typeof

19
00:01:12.000 --> 00:01:16.000
message, that's a string, the type of another

20
00:01:16.000 --> 00:01:20.000
is an object. So the first constant is a string

21
00:01:20.000 --> 00:01:24.000
primitive, the second one is an object. However,

22
00:01:24.000 --> 00:01:28.000
when we use the dot notation with a string negative

23
00:01:28.000 --> 00:01:32.000
JavaScript engine internally wraps this with a

24
00:01:32.000 --> 00:01:36.000
string object, we don't see that, but we can work with this like

25
00:01:36.000 --> 00:01:40.000
a string object. Now just like the math object, if you want to learn

26
00:01:40.000 --> 00:01:44.000
about all these methods, it's best to look at the documentation

27
00:01:44.000 --> 00:01:48.000
so simply search for JavaScript string.

28
00:01:48.000 --> 00:01:52.000
Once again, on developer.mozilla.org

29
00:01:52.000 --> 00:01:56.000
on this page you can

30
00:01:56.000 --> 00:02:00.000
see all the properties and methods of the string object.

31
00:02:00.000 --> 00:02:04.000
in this lecture, I'm going to show you a few of these methods, but I strongly

32
00:02:04.000 --> 00:02:08.000
recommend you to look at the documentation once, just to have a quick look to see

33
00:02:08.000 --> 00:02:12.000
what methods are there in case you need them. So back to our code

34
00:02:12.000 --> 00:02:16.000
let's change this string to this is my first

35
00:02:16.000 --> 00:02:20.000
message. Here we have the length

36
00:02:20.000 --> 00:02:24.000
property which returns the number of characters in a string. This

37
00:02:24.000 --> 00:02:28.000
is particularly useful in situations where we want to make sure the user

38
00:02:28.000 --> 00:02:32.000
types at least a certain number of characters inside an input field.

39
00:02:32.000 --> 00:02:36.000
Or maybe you want to put a limit. You don't want the user to type in more than 100

40
00:02:36.000 --> 00:02:40.000
characters. Now if you want to access a character at a given

41
00:02:40.000 --> 00:02:44.000
index, you can use square brackets, so,

42
00:02:44.000 --> 00:02:48.000
message of 0 returns t, message of 1 returns

43
00:02:48.000 --> 00:02:52.000
h. If you want to see this string has a special word,

44
00:02:52.000 --> 00:02:56.000
you can use the includes method. So,

45
00:02:56.000 --> 00:03:00.000
does this string have my

46
00:03:00.000 --> 00:03:04.000
yes it does, but it doesn't have not.

47
00:03:04.000 --> 00:03:08.000
We also have another method, starts with

48
00:03:08.000 --> 00:03:12.000
so this string starts with this

49
00:03:12.000 --> 00:03:16.000
but if you pass a capitol t here

50
00:03:16.000 --> 00:03:20.000
we get false, so note that these searches are case sensitive.

51
00:03:20.000 --> 00:03:24.000
We have a similar method, ends with so message.ends

52
00:03:24.000 --> 00:03:28.000
with e, so

53
00:03:28.000 --> 00:03:32.000
you can see the last character here is e. If you want to find the index

54
00:03:32.000 --> 00:03:36.000
of a given character or a given string, inside the string, you can use

55
00:03:36.000 --> 00:03:40.000
the index of method. So let's see what is the index

56
00:03:40.000 --> 00:03:44.000
of my. So my starts at index

57
00:03:44.000 --> 00:03:48.000
8. We can also replace part of a string

58
00:03:48.000 --> 00:03:52.000
so replace, we want to replace first,

59
00:03:52.000 --> 00:03:56.000
with second. Pretty easy. Note that this

60
00:03:56.000 --> 00:04:00.000
returns a new string and does not modify the original one. So,

61
00:04:00.000 --> 00:04:04.000
if you log the original one, we still have this is my first

62
00:04:04.000 --> 00:04:08.000
message. We also have a couple of useful methods

63
00:04:08.000 --> 00:04:12.000
toUpperCase, once again this returns a new string where

64
00:04:12.000 --> 00:04:16.000
all characters are uppercase, similar to this method, we have two lower case

65
00:04:16.000 --> 00:04:20.000
and another useful method is trim. So let me

66
00:04:20.000 --> 00:04:24.000
add a couple of white spaces here, before

67
00:04:24.000 --> 00:04:28.000
and after our message. Now, if we call

68
00:04:28.000 --> 00:04:32.000
trim method, it gets rid of all the white

69
00:04:32.000 --> 00:04:36.000
space before and after our message. And of course this method,

70
00:04:36.000 --> 00:04:40.000
has variations, for example we have trimLeft,

71
00:04:40.000 --> 00:04:44.000
which only removes the white space at the beginning of the string

72
00:04:44.000 --> 00:04:48.000
of trim right, and so on. Another important concept you need to

73
00:04:48.000 --> 00:04:52.000
know in JavaScript, is escape notation. So if you look at

74
00:04:52.000 --> 00:04:56.000
the documentation for the string object, you can see in this table under

75
00:04:56.000 --> 00:05:00.000
escape notation, you've got these special characters. So if you want

76
00:05:00.000 --> 00:05:04.000
to use these you need to encode these using the escape notation.

77
00:05:04.000 --> 00:05:08.000
For example, let's say you want to have a single quote

78
00:05:08.000 --> 00:05:12.000
in your string. Now in this example, you have defined this string

79
00:05:12.000 --> 00:05:16.000
with a single code. So if you want to have a single code inside of this string,

80
00:05:16.000 --> 00:05:20.000
look, our Javascript

81
00:05:20.000 --> 00:05:24.000
engine gets confused, because it thinks this second single code represents

82
00:05:24.000 --> 00:05:28.000
the end of the string. To fix this, we need to prefix this

83
00:05:28.000 --> 00:05:32.000
with a back slash, and now, this character is escaped

84
00:05:32.000 --> 00:05:36.000
it's encoded, so when we log the message

85
00:05:36.000 --> 00:05:40.000
you can see the single code is actually part of the string.

86
00:05:40.000 --> 00:05:44.000
Another useful escape character is /n

87
00:05:44.000 --> 00:05:48.000
which represents a new line. So back here if we add

88
00:05:48.000 --> 00:05:52.000
a /n after my, this will

89
00:05:52.000 --> 00:05:56.000
add a new line. So save the changes, let's look at message

90
00:05:56.000 --> 00:06:00.000
on the console, you can see we have a new line here. Another very useful

91
00:06:00.000 --> 00:06:04.000
method, is the split method. So message,

92
00:06:04.000 --> 00:06:08.000
.split, with this we can split a string based

93
00:06:08.000 --> 00:06:12.000
on a given character. So here I'm going to pass a white

94
00:06:12.000 --> 00:06:16.000
space, and see what we get, we get an array of

95
00:06:16.000 --> 00:06:20.000
5 items. And each item in this array is a

96
00:06:20.000 --> 00:06:24.000
word in our message. Next, we're going to look at template literals.

